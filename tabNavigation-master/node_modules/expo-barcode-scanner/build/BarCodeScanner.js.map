{"version":3,"file":"BarCodeScanner.js","sourceRoot":"","sources":["../src/BarCodeScanner.tsx"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport mapValues from 'lodash/mapValues';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Platform, ViewProps, ViewPropTypes } from 'react-native';\nimport { PermissionResponse, PermissionStatus } from 'unimodules-permissions-interface';\n\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\n\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\n\nconst EVENT_THROTTLE_MS = 500;\n\nexport type BarCodeEvent = {\n  type: string;\n  data: string;\n  [key: string]: any;\n};\n\nexport type BarCodeEventCallbackArguments = {\n  nativeEvent: BarCodeEvent;\n};\n\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\n\nexport { PermissionResponse, PermissionStatus };\n\nexport interface BarCodeScannerProps extends ViewProps {\n  type?: 'front' | 'back' | number;\n  barCodeTypes?: string[];\n  onBarCodeScanned: BarCodeScannedCallback;\n}\n\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\n  lastEvents: { [key: string]: any } = {};\n  lastEventsTimes: { [key: string]: any } = {};\n\n  static Constants = {\n    BarCodeType,\n    Type,\n  };\n\n  static ConversionTables = {\n    type: Type,\n  };\n\n  static propTypes = {\n    ...ViewPropTypes,\n    onBarCodeScanned: PropTypes.func,\n    barCodeTypes: PropTypes.array,\n    type: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  };\n\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType),\n  };\n\n  static async getPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  }\n\n  static async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  }\n\n  static async scanFromURLAsync(\n    url: string,\n    barCodeTypes: string[] = Object.values(BarCodeType)\n  ): Promise<{ type: string; data: string }> {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n\n    // On other platforms, if barCodeTypes is not provided, use all available types\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  // coordinates of cornerPoints and boundingBox are represented in DP (Display-Indepent Points) unit\n  // React Native is using the same unit\n  onObjectDetected = (callback?: BarCodeScannedCallback) => ({\n    nativeEvent,\n  }: BarCodeEventCallbackArguments) => {\n    const { type } = nativeEvent;\n    if (\n      this.lastEvents[type] &&\n      this.lastEventsTimes[type] &&\n      JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n      Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\n    ) {\n      return;\n    }\n\n    if (callback) {\n      callback(nativeEvent);\n      this.lastEventsTimes[type] = new Date();\n      this.lastEvents[type] = JSON.stringify(nativeEvent);\n    }\n  };\n\n  convertNativeProps(props: BarCodeScannerProps) {\n    const newProps = mapValues(props, this.convertProp);\n    return newProps;\n  }\n\n  convertProp(value: any, key: string): any {\n    if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n      return BarCodeScanner.ConversionTables[key][value];\n    }\n    return value;\n  }\n}\n\nexport const { Constants, getPermissionsAsync, requestPermissionsAsync } = BarCodeScanner;\n"]}